{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/yarlo/Documentos/GitHub/estuduante/src/components/quiz-overview/quiz-overview.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Quiz from \"../quiz/quiz.component\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { getQuestion } from '../../firebase/firebase.utilis';\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\nconst timerProps = {\n  isPlaying: true,\n  size: 120,\n  strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time\",\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: dimension\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\nconst getTimeMinutes = time => time % hourSeconds / minuteSeconds | 0;\n\nconst QuizOverview = () => {\n  _s();\n\n  const [questions, setQuestions] = useState(null);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const result = await getQuestion(id);\n      console.log(result);\n      setQuestions(result);\n    };\n\n    fetchQuestion();\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log('submitted');\n  };\n\n  const handleNumber = () => {\n    return true === false ? 3 : 5;\n  };\n\n  const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n\n  const endTime = stratTime + 3600; // use UNIX timestamp in seconds\n\n  const remainingTime = endTime - stratTime;\n  return questions === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \" loading... \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 34\n  }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      style: {\n        textAlign: 'center'\n      },\n      children: questions.question.map(el => /*#__PURE__*/_jsxDEV(Quiz, {\n        value: handleNumber,\n        ...el\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 50\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(QuizOverview, \"TXHQG2ueCtC0+F25EQw5P66ivkc=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizOverview;\nexport default QuizOverview;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizOverview\");","map":{"version":3,"sources":["/home/yarlo/Documentos/GitHub/estuduante/src/components/quiz-overview/quiz-overview.component.jsx"],"names":["useEffect","useState","useParams","Quiz","CountdownCircleTimer","getQuestion","minuteSeconds","hourSeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeMinutes","QuizOverview","questions","setQuestions","id","fetchQuestion","result","console","log","handleSubmit","e","preventDefault","handleNumber","stratTime","Date","now","endTime","remainingTime","textAlign","question","map","el"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,WAAT,QAA4B,gCAA5B;AAEA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,WAAW,GAAG,IAApB;AAEA,MAAMC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAE,IADI;AAGfC,EAAAA,IAAI,EAAE,GAHS;AAIfC,EAAAA,WAAW,EAAE;AAJE,CAAnB;;AAOA,MAAMC,UAAU,GAAG,CAACC,SAAD,EAAYC,IAAZ,KAAqB;AACpC,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,gBAAuBA;AAAvB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAPD;;AASA,MAAME,cAAc,GAAID,IAAD,IAAYA,IAAI,GAAGP,WAAR,GAAuBD,aAAxB,GAAyC,CAA1E;;AAGA,MAAMU,YAAY,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAASjB,SAAS,EAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMoB,aAAa,GAAG,YAAY;AAC9B,YAAMC,MAAM,GAAG,MAAMhB,WAAW,CAACc,EAAD,CAAhC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAH,MAAAA,YAAY,CAACG,MAAD,CAAZ;AACH,KAJD;;AAKAD,IAAAA,aAAa;AAChB,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMI,YAAY,GAAGC,CAAC,IAAI;AACtBA,IAAAA,CAAC,CAACC,cAAF;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH,GAHD;;AAMA,QAAMI,YAAY,GAAG,MAAM;AACvB,WAAO,SAAS,KAAT,GAAiB,CAAjB,GAAqB,CAA5B;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAa,IAA/B,CAvBuB,CAuBc;;AACrC,QAAMC,OAAO,GAAGH,SAAS,GAAG,IAA5B,CAxBuB,CAwBW;;AAElC,QAAMI,aAAa,GAAGD,OAAO,GAAGH,SAAhC;AACA,SAAOX,SAAS,KAAK,IAAd,gBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtB,gBACH;AAAM,IAAA,QAAQ,EAAEO,YAAhB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAAES,QAAAA,SAAS,EAAE;AAAb,OAA5B;AAAA,gBAGQhB,SAAS,CAACiB,QAAV,CAAmBC,GAAnB,CAAuBC,EAAE,iBAAI,QAAC,IAAD;AAAM,QAAA,KAAK,EAAET,YAAb;AAAA,WAA+BS;AAA/B;AAAA;AAAA;AAAA;AAAA,cAA7B;AAHR;AAAA;AAAA;AAAA;AAAA,YADJ,eA2BI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH,CA1DD;;GAAMpB,Y;UAEad,S;;;KAFbc,Y;AA4DN,eAAeA,YAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Quiz from \"../quiz/quiz.component\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport { getQuestion } from '../../firebase/firebase.utilis';\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\n\nconst timerProps = {\n    isPlaying: true,\n\n    size: 120,\n    strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n    return (\n        <div className=\"time-wrapper\">\n            <div className=\"time\">{time}</div>\n            <div>{dimension}</div>\n        </div>\n    );\n};\n\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\n\n\nconst QuizOverview = () => {\n    const [questions, setQuestions] = useState(null)\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchQuestion = async () => {\n            const result = await getQuestion(id)\n            console.log(result)\n            setQuestions(result)\n        }\n        fetchQuestion()\n    }, [])\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        console.log('submitted')\n    }\n\n\n    const handleNumber = () => {\n        return true === false ? 3 : 5\n    }\n\n    const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n    const endTime = stratTime + 3600; // use UNIX timestamp in seconds\n\n    const remainingTime = endTime - stratTime;\n    return questions === null ? (<div> loading... </div>) : (\n        <form onSubmit={handleSubmit}>\n            <div className=\"row\" style={{ textAlign: 'center' }}>\n\n                {\n                    questions.question.map(el => <Quiz value={handleNumber} {...el} />)\n                }\n                {/*\n            \n            \n            <CountdownCircleTimer\n                {...timerProps}\n                colors={[[\"#EF798A\"]]}\n                duration={hourSeconds}\n                initialRemainingTime={remainingTime % hourSeconds}\n                onComplete={(totalElapsedTime) => [\n                    remainingTime - totalElapsedTime > minuteSeconds\n                ]}\n            >\n                {({ elapsedTime }) =>\n                    renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n                }\n            </CountdownCircleTimer>\n            \n            */}\n\n\n            </div>\n            <button type=\"submit\">Done</button>\n        </form>\n    );\n}\n\nexport default QuizOverview;\n\n\n"]},"metadata":{},"sourceType":"module"}