{"ast":null,"code":"import _objectSpread from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{useEffect,useState}from'react';import{useParams}from'react-router-dom';import Quiz from\"../quiz/quiz.component\";import{CountdownCircleTimer}from'react-countdown-circle-timer';import{getQuestion}from'../../firebase/firebase.utilis';var minuteSeconds=60;var hourSeconds=3600;var timerProps={isPlaying:true,size:120,strokeWidth:6};var renderTime=function renderTime(dimension,time){return/*#__PURE__*/_jsxs(\"div\",{className:\"time-wrapper\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"time\",children:time}),/*#__PURE__*/_jsx(\"div\",{children:dimension})]});};var getTimeMinutes=function getTimeMinutes(time){return time%hourSeconds/minuteSeconds|0;};var QuizOverview=function QuizOverview(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),questions=_useState2[0],setQuestions=_useState2[1];var _useParams=useParams(),id=_useParams.id;useEffect(function(){var fetchQuestion=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getQuestion(id);case 2:result=_context.sent;console.log(result);setQuestions(result);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchQuestion(){return _ref.apply(this,arguments);};}();fetchQuestion();},[]);var handleSubmit=function handleSubmit(e){e.preventDefault();console.log('submitted');};var handleNumber=function handleNumber(){return true===false?3:5;};var stratTime=Date.now()/1000;// use UNIX timestamp in seconds\nvar endTime=stratTime+3600;// use UNIX timestamp in seconds\nvar remainingTime=endTime-stratTime;return questions===null?/*#__PURE__*/_jsx(\"div\",{children:\" loading... \"}):/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"div\",{className:\"row\",style:{textAlign:'center'},children:questions.question.map(function(el){return/*#__PURE__*/_jsx(Quiz,_objectSpread({value:handleNumber},el));})}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Done\"})]});};export default QuizOverview;","map":{"version":3,"sources":["/home/yarlo/Documentos/APP/quiz-final/src/components/quiz-overview/quiz-overview.component.jsx"],"names":["useEffect","useState","useParams","Quiz","CountdownCircleTimer","getQuestion","minuteSeconds","hourSeconds","timerProps","isPlaying","size","strokeWidth","renderTime","dimension","time","getTimeMinutes","QuizOverview","questions","setQuestions","id","fetchQuestion","result","console","log","handleSubmit","e","preventDefault","handleNumber","stratTime","Date","now","endTime","remainingTime","textAlign","question","map","el"],"mappings":"osBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,IAAP,KAAiB,wBAAjB,CACA,OAASC,oBAAT,KAAqC,8BAArC,CACA,OAASC,WAAT,KAA4B,gCAA5B,CAEA,GAAMC,CAAAA,aAAa,CAAG,EAAtB,CACA,GAAMC,CAAAA,WAAW,CAAG,IAApB,CAEA,GAAMC,CAAAA,UAAU,CAAG,CACfC,SAAS,CAAE,IADI,CAGfC,IAAI,CAAE,GAHS,CAIfC,WAAW,CAAE,CAJE,CAAnB,CAOA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,SAAD,CAAYC,IAAZ,CAAqB,CACpC,mBACI,aAAK,SAAS,CAAC,cAAf,wBACI,YAAK,SAAS,CAAC,MAAf,UAAuBA,IAAvB,EADJ,cAEI,qBAAMD,SAAN,EAFJ,GADJ,CAMH,CAPD,CASA,GAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACD,IAAD,QAAYA,CAAAA,IAAI,CAAGP,WAAR,CAAuBD,aAAxB,CAAyC,CAAnD,EAAvB,CAGA,GAAMU,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,eACWf,QAAQ,CAAC,IAAD,CADnB,wCAChBgB,SADgB,eACLC,YADK,8BAERhB,SAAS,EAFD,CAEfiB,EAFe,YAEfA,EAFe,CAIvBnB,SAAS,CAAC,UAAM,CACZ,GAAMoB,CAAAA,aAAa,0FAAG,oKACGf,CAAAA,WAAW,CAACc,EAAD,CADd,QACZE,MADY,eAElBC,OAAO,CAACC,GAAR,CAAYF,MAAZ,EACAH,YAAY,CAACG,MAAD,CAAZ,CAHkB,sDAAH,kBAAbD,CAAAA,aAAa,0CAAnB,CAKAA,aAAa,GAChB,CAPQ,CAON,EAPM,CAAT,CASA,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,CAAC,CAAI,CACtBA,CAAC,CAACC,cAAF,GACAJ,OAAO,CAACC,GAAR,CAAY,WAAZ,EACH,CAHD,CAMA,GAAMI,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACvB,MAAO,QAAS,KAAT,CAAiB,CAAjB,CAAqB,CAA5B,CACH,CAFD,CAIA,GAAMC,CAAAA,SAAS,CAAGC,IAAI,CAACC,GAAL,GAAa,IAA/B,CAAqC;AACrC,GAAMC,CAAAA,OAAO,CAAGH,SAAS,CAAG,IAA5B,CAAkC;AAElC,GAAMI,CAAAA,aAAa,CAAGD,OAAO,CAAGH,SAAhC,CACA,MAAOX,CAAAA,SAAS,GAAK,IAAd,cAAsB,qCAAtB,cACH,cAAM,QAAQ,CAAEO,YAAhB,wBACI,YAAK,SAAS,CAAC,KAAf,CAAqB,KAAK,CAAE,CAAES,SAAS,CAAE,QAAb,CAA5B,UAGQhB,SAAS,CAACiB,QAAV,CAAmBC,GAAnB,CAAuB,SAAAC,EAAE,qBAAI,KAAC,IAAD,gBAAM,KAAK,CAAET,YAAb,EAA+BS,EAA/B,EAAJ,EAAzB,CAHR,EADJ,cA2BI,eAAQ,IAAI,CAAC,QAAb,kBA3BJ,GADJ,CA+BH,CA1DD,CA4DA,cAAepB,CAAAA,YAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Quiz from \"../quiz/quiz.component\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer'\nimport { getQuestion } from '../../firebase/firebase.utilis';\n\nconst minuteSeconds = 60;\nconst hourSeconds = 3600;\n\nconst timerProps = {\n    isPlaying: true,\n\n    size: 120,\n    strokeWidth: 6\n};\n\nconst renderTime = (dimension, time) => {\n    return (\n        <div className=\"time-wrapper\">\n            <div className=\"time\">{time}</div>\n            <div>{dimension}</div>\n        </div>\n    );\n};\n\nconst getTimeMinutes = (time) => ((time % hourSeconds) / minuteSeconds) | 0;\n\n\nconst QuizOverview = () => {\n    const [questions, setQuestions] = useState(null)\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchQuestion = async () => {\n            const result = await getQuestion(id)\n            console.log(result)\n            setQuestions(result)\n        }\n        fetchQuestion()\n    }, [])\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        console.log('submitted')\n    }\n\n\n    const handleNumber = () => {\n        return true === false ? 3 : 5\n    }\n\n    const stratTime = Date.now() / 1000; // use UNIX timestamp in seconds\n    const endTime = stratTime + 3600; // use UNIX timestamp in seconds\n\n    const remainingTime = endTime - stratTime;\n    return questions === null ? (<div> loading... </div>) : (\n        <form onSubmit={handleSubmit}>\n            <div className=\"row\" style={{ textAlign: 'center' }}>\n\n                {\n                    questions.question.map(el => <Quiz value={handleNumber} {...el} />)\n                }\n                {/*\n            \n            \n            <CountdownCircleTimer\n                {...timerProps}\n                colors={[[\"#EF798A\"]]}\n                duration={hourSeconds}\n                initialRemainingTime={remainingTime % hourSeconds}\n                onComplete={(totalElapsedTime) => [\n                    remainingTime - totalElapsedTime > minuteSeconds\n                ]}\n            >\n                {({ elapsedTime }) =>\n                    renderTime(\"minutes\", getTimeMinutes(hourSeconds - elapsedTime))\n                }\n            </CountdownCircleTimer>\n            \n            */}\n\n\n            </div>\n            <button type=\"submit\">Done</button>\n        </form>\n    );\n}\n\nexport default QuizOverview;\n\n\n"]},"metadata":{},"sourceType":"module"}