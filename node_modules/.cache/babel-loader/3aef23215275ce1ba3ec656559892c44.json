{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/firebase-functions\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD3q3ZnM6qejCc4NOoXjQ2xsVfVn24WdJc\",\n  authDomain: \"quiz-54a90.firebaseapp.com\",\n  projectId: \"quiz-54a90\",\n  storageBucket: \"quiz-54a90.appspot.com\",\n  messagingSenderId: \"915241107805\",\n  appId: \"1:915241107805:web:91ca6d11bb535d313828b4\",\n  measurementId: \"G-4HHYPEW7DM\"\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nexport const currentUserProfile = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const sanpshot = await userRef.get();\n\n  if (!sanpshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const CreatedAt = new Date();\n    await userRef.set({\n      displayName,\n      email,\n      average: 0,\n      CreatedAt,\n      result: [],\n      isExamHasGiven: false,\n      ...additionalData\n    });\n  }\n\n  return userRef;\n};\nexport const getQuestion = async path => {\n  const docRef = firestore.doc(`questions/${path}`);\n  const snapShot = await docRef.get();\n  return await snapShot.data();\n};\nexport const createResult = async (uid, obj, examName) => {\n  console.log({\n    uid,\n    obj\n  });\n  const {\n    correctPoints,\n    numberOfCorrectAnswers,\n    numberOfIncorrectAnswers,\n    numberOfQuestions\n  } = obj;\n  let docRef = firestore.doc(`users/${uid}`);\n  const createdAt = Date.now();\n  await docRef.update({\n    result: firebase.firestore.FieldValue.arrayUnion({\n      correctPoints,\n      numberOfCorrectAnswers,\n      numberOfIncorrectAnswers,\n      numberOfQuestions,\n      createdAt,\n      examName\n    })\n  });\n};\nexport const getResult = async uid => {\n  const docRef = await firestore.doc(`users/${uid}`);\n  return docRef; //const result = await docRef.get().data();\n  //return result;\n  //console.log(result);\n};\nexport const updateGroupResult = async (groupID, userId, firstName, average, oldObj) => {\n  console.log(groupID);\n  const docRef = firestore.doc(\"result/l1aU30VzftlGgYP4Y91W\");\n  const res = await docRef.get();\n  const resultArr = res.data()[groupID];\n  console.log(res.data());\n  if (resultArr) resultArr.forEach(async el => {\n    console.log(el);\n\n    if (el.id === userId) {\n      //docRef.set({ [groupID]: [{ userId, firstName, average }] });\n      await docRef.update({\n        [groupID]: firebase.firestore.FieldValue.arrayRemove({ ...oldObj\n        })\n      });\n      await docRef.update({\n        [groupID]: firebase.firestore.FieldValue.arrayUnion({\n          id: userId,\n          firstName,\n          average\n        })\n      });\n    } else {\n      console.log('i am get logged');\n      await docRef.update({\n        [groupID]: firebase.firestore.FieldValue.arrayUnion({\n          id: userId,\n          firstName,\n          average\n        })\n      });\n    }\n  });\n};\nexport const updateAverage = async (path, average) => {\n  const docRef = firestore.doc(`users/${path}`);\n  await docRef.update({\n    average: average\n  });\n}; //firebase.functions.Functions.\n\nexport const firestore = firebase.firestore();\nexport const auth = firebase.auth();","map":{"version":3,"sources":["/home/yarlo/Documentos/APP/quiz-final/src/firebase/firebase.utilis.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","currentUserProfile","userAuth","additionalData","userRef","firestore","doc","uid","sanpshot","get","exists","displayName","email","CreatedAt","Date","set","average","result","isExamHasGiven","getQuestion","path","docRef","snapShot","data","createResult","obj","examName","console","log","correctPoints","numberOfCorrectAnswers","numberOfIncorrectAnswers","numberOfQuestions","createdAt","now","update","FieldValue","arrayUnion","getResult","updateGroupResult","groupID","userId","firstName","oldObj","res","resultArr","forEach","el","id","arrayRemove","updateAverage","auth"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/firebase-functions\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD3q3ZnM6qejCc4NOoXjQ2xsVfVn24WdJc\",\n  authDomain: \"quiz-54a90.firebaseapp.com\",\n  projectId: \"quiz-54a90\",\n  storageBucket: \"quiz-54a90.appspot.com\",\n  messagingSenderId: \"915241107805\",\n  appId: \"1:915241107805:web:91ca6d11bb535d313828b4\",\n  measurementId: \"G-4HHYPEW7DM\",\n};\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nexport const currentUserProfile = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const sanpshot = await userRef.get();\n\n  if (!sanpshot.exists) {\n    const { displayName, email } = userAuth;\n    const CreatedAt = new Date();\n\n    await userRef.set({\n      displayName,\n      email,\n      average: 0,\n      CreatedAt,\n      result: [],\n      isExamHasGiven: false,\n      ...additionalData,\n    });\n  }\n\n  return userRef;\n};\n\n\n\nexport const getQuestion = async (path) => {\n  const docRef = firestore.doc(`questions/${path}`);\n  const snapShot = await docRef.get();\n  return await snapShot.data();\n};\n\nexport const createResult = async (uid, obj, examName) => {\n  console.log({ uid, obj });\n  const {\n    correctPoints,\n    numberOfCorrectAnswers,\n    numberOfIncorrectAnswers,\n    numberOfQuestions,\n  } = obj;\n  let docRef = firestore.doc(`users/${uid}`);\n  const createdAt = Date.now();\n\n  await docRef.update({\n    result: firebase.firestore.FieldValue.arrayUnion({\n      correctPoints,\n      numberOfCorrectAnswers,\n      numberOfIncorrectAnswers,\n      numberOfQuestions,\n      createdAt,\n      examName,\n    }),\n  });\n};\n\nexport const getResult = async (uid) => {\n  const docRef = await firestore.doc(`users/${uid}`);\n  return docRef;\n  //const result = await docRef.get().data();\n\n  //return result;\n  //console.log(result);\n};\n\nexport const updateGroupResult = async (\n  groupID,\n  userId,\n  firstName,\n  average,\n  oldObj\n) => {\n  console.log(groupID)\n  const docRef = firestore.doc(\"result/l1aU30VzftlGgYP4Y91W\");\n  const res =  await docRef.get();\n  const resultArr = res.data()[groupID]\n  console.log(res.data())\n\n\n  if(resultArr)\n\n  resultArr.forEach( async el => {\n    console.log(el)\n    if (el.id === userId) {\n\n      //docRef.set({ [groupID]: [{ userId, firstName, average }] });\n       await docRef.update({\n        [groupID]: firebase.firestore.FieldValue.arrayRemove({ ...oldObj }),\n      });\n\n       await docRef.update({\n        [groupID]: firebase.firestore.FieldValue.arrayUnion({\n          id: userId,\n          firstName,\n          average,\n        }),\n      });\n    } else {\n      console.log('i am get logged')\n       await docRef.update({\n        [groupID]: firebase.firestore.FieldValue.arrayUnion({\n          id: userId,\n          firstName,\n          average,\n        }),\n      });\n    }\n  });\n\n\n\n\n};\n\nexport const updateAverage = async (path, average) => {\n  const docRef = firestore.doc(`users/${path}`);\n\n  await docRef.update({\n    average: average,\n  });\n};\n//firebase.functions.Functions.\n\n\nexport const firestore = firebase.firestore();\nexport const auth = firebase.auth();\n\n\n"]},"metadata":{},"sourceType":"module"}