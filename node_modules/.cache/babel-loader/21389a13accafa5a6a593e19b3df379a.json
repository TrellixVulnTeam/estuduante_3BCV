{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/yarlo/Documentos/APP/quiz-final/src/components/quiz-demo/quiz-demo.component.jsx\",\n    _s = $RefreshSig$();\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { useState, useEffect } from 'react';\nimport Quiz from 'react-quiz-component';\nimport { connect } from 'react-redux';\nimport { createResult, firestore, updateAverage, updateGroupResult } from '../../firebase/firebase.utilis';\nimport { totalAvarage } from './../../utilities';\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { useParams } from 'react-router-dom';\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nconst checkUserExist = (id, userID) => {\n  return id === userID;\n};\n\nconst QuizDemo = ({\n  user\n}) => {\n  _s();\n\n  const [quiz, setQuiz] = useState();\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const getData = async () => {\n      const docRef = await firestore.doc(`questions/${id}`).get();\n      const data = docRef.data();\n\n      try {\n        setQuiz(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getData();\n  }, [id]);\n\n  const onCompleteAction = async obj => {\n    if (obj.numberOfCorrectAnswers === 0 && obj.numberOfIncorrectAnswers === 0) {\n      console.log('i am 0');\n    } else {\n      const total = totalAvarage(user.result, obj.correctPoints);\n      const normalAvarage = total / user.result.length;\n      const mainAvarage = (total + obj.correctPoints) / (user.result.length + 1);\n      const oldObj = {\n        firstName: user.firstName,\n        id: user.id,\n        average: normalAvarage\n      };\n      await createResult(user.id, obj, quiz.examName);\n      await updateGroupResult(user.group, user.id, user.firstName, mainAvarage, oldObj);\n      await updateAverage(user.id, mainAvarage);\n      const userRef = firestore.doc(`questions/${id}`);\n      await userRef.update({\n        userEntry: firebase.firestore.FieldValue.arrayUnion({\n          id: user.id\n        })\n      });\n    } // YOUR LOGIC GOES HERE\n\n  };\n\n  if (user && quiz) {\n    let isExamHasGiven1 = quiz.userEntry.some(el => el.id === user.id);\n    console.log(isExamHasGiven1);\n\n    if (user.grade !== quiz.grade) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" You are not permitted to give exam in this grade \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this);\n    } else if (quiz.isThereAnyExam === false) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"There Is no exam Today\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this);\n    } else if (isExamHasGiven1 === false && quiz.isThereAnyExam === true) {\n      return quiz ? /*#__PURE__*/_jsxDEV(Quiz, {\n        quiz: quiz.question,\n        onComplete: onCompleteAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 92\n      }, this);\n    } else if (isExamHasGiven1 === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"You have Already give your exam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this);\n    }\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_s(QuizDemo, \"tARXwhDg8oFpOqFm5BaUtGRCvzk=\", false, function () {\n  return [useParams];\n});\n\n_c = QuizDemo;\n\nconst mapStateToProps = state => ({\n  user: selectCurrentUser(state)\n});\n\nexport default connect(mapStateToProps)(QuizDemo);\n\nvar _c;\n\n$RefreshReg$(_c, \"QuizDemo\");","map":{"version":3,"sources":["/home/yarlo/Documentos/APP/quiz-final/src/components/quiz-demo/quiz-demo.component.jsx"],"names":["firebase","useState","useEffect","Quiz","connect","createResult","firestore","updateAverage","updateGroupResult","totalAvarage","selectCurrentUser","useParams","monthNames","checkUserExist","id","userID","QuizDemo","user","quiz","setQuiz","getData","docRef","doc","get","data","err","console","log","onCompleteAction","obj","numberOfCorrectAnswers","numberOfIncorrectAnswers","total","result","correctPoints","normalAvarage","length","mainAvarage","oldObj","firstName","average","examName","group","userRef","update","userEntry","FieldValue","arrayUnion","isExamHasGiven1","some","el","grade","isThereAnyExam","question","mapStateToProps","state"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nimport { useState, useEffect } from 'react';\nimport Quiz from 'react-quiz-component';\nimport { connect } from 'react-redux';\n\nimport { createResult, firestore, updateAverage, updateGroupResult } from '../../firebase/firebase.utilis';\nimport { totalAvarage } from './../../utilities'\n\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { useParams } from 'react-router-dom';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n\nconst checkUserExist = (id, userID) => {\n\n    return id === userID\n\n}\n\nconst QuizDemo = ({ user }) => {\n    const [quiz, setQuiz] = useState();\n    const { id } = useParams();\n\n    useEffect(() => {\n        const getData = async () => {\n            const docRef = await firestore.doc(`questions/${id}`).get()\n            const data = docRef.data()\n            try {\n                setQuiz(data);\n\n            } catch (err) {\n                console.log(err)\n\n            }\n        }\n        getData()\n\n    }, [id])\n\n    const onCompleteAction = async (obj) => {\n\n        if (obj.numberOfCorrectAnswers === 0 && obj.numberOfIncorrectAnswers === 0) {\n            console.log('i am 0')\n\n        } else {\n\n            const total = totalAvarage(user.result, obj.correctPoints);\n            const normalAvarage = total / user.result.length;\n            const mainAvarage = (total + obj.correctPoints) / (user.result.length + 1)\n            const oldObj = {\n                firstName: user.firstName,\n                id: user.id,\n                average: normalAvarage\n            }\n\n            await createResult(user.id, obj, quiz.examName);\n            await updateGroupResult(user.group, user.id, user.firstName, mainAvarage, oldObj);\n            await updateAverage(user.id, mainAvarage);\n\n            const userRef = firestore.doc(`questions/${id}`)\n            await userRef.update({\n                userEntry: firebase.firestore.FieldValue.arrayUnion({\n                    id: user.id\n                })\n\n\n            }) \n\n\n        }\n\n\n        // YOUR LOGIC GOES HERE\n    }\n    if (user && quiz) {\n\n\n        let isExamHasGiven1 = quiz.userEntry.some(el => el.id === user.id)\n        console.log(isExamHasGiven1)\n\n\n\n\n        if (user.grade !== quiz.grade) {\n            return (<div> You are not permitted to give exam in this grade </div>)\n        }\n        else if (quiz.isThereAnyExam === false) {\n            return (<div>There Is no exam Today</div>)\n        }\n        else if (isExamHasGiven1 === false && quiz.isThereAnyExam === true) {\n            return quiz ? (<Quiz quiz={quiz.question} onComplete={onCompleteAction} />) : (<div>Loading...</div>);\n        } else if (isExamHasGiven1 === true) {\n            return (<div>You have Already give your exam</div>)\n        }\n    } else {\n        return (<div>Loading..</div>)\n    }\n\n\n}\n\nconst mapStateToProps = state => ({\n    user: selectCurrentUser(state)\n})\n\nexport default connect(mapStateToProps)(QuizDemo);"]},"metadata":{},"sourceType":"module"}