{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _regeneratorRuntime from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/yarlo/Documentos/APP/quiz-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import firebase from\"firebase/app\";import\"firebase/firestore\";import{useState,useEffect}from'react';import Quiz from'react-quiz-component';import{connect}from'react-redux';import{createResult,firestore,updateAverage,updateGroupResult}from'../../firebase/firebase.utilis';import{totalAvarage}from'./../../utilities';import{selectCurrentUser}from'../../redux/user/user.selector';import{useParams}from'react-router-dom';var monthNames=[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];var checkUserExist=function checkUserExist(id,userID){return id===userID;};var QuizDemo=function QuizDemo(_ref){var user=_ref.user;var _useState=useState(),_useState2=_slicedToArray(_useState,2),quiz=_useState2[0],setQuiz=_useState2[1];var _useParams=useParams(),id=_useParams.id;useEffect(function(){var getData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var docRef,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return firestore.doc(\"questions/\".concat(id)).get();case 2:docRef=_context.sent;data=docRef.data();try{setQuiz(data);}catch(err){console.log(err);}case 5:case\"end\":return _context.stop();}}},_callee);}));return function getData(){return _ref2.apply(this,arguments);};}();getData();},[id]);var onCompleteAction=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(obj){var total,normalAvarage,mainAvarage,oldObj,userRef;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(obj.numberOfCorrectAnswers===0&&obj.numberOfIncorrectAnswers===0)){_context2.next=4;break;}console.log('i am 0');_context2.next=17;break;case 4:total=totalAvarage(user.result,obj.correctPoints);normalAvarage=total/user.result.length;mainAvarage=(total+obj.correctPoints)/(user.result.length+1);oldObj={firstName:user.firstName,id:user.id,average:normalAvarage};_context2.next=10;return createResult(user.id,obj,quiz.examName);case 10:_context2.next=12;return updateGroupResult(user.group,user.id,user.firstName,mainAvarage,oldObj);case 12:_context2.next=14;return updateAverage(user.id,mainAvarage);case 14:userRef=firestore.doc(\"questions/\".concat(id));_context2.next=17;return userRef.update({userEntry:firebase.firestore.FieldValue.arrayUnion({id:user.id})});case 17:case\"end\":return _context2.stop();}}},_callee2);}));return function onCompleteAction(_x){return _ref3.apply(this,arguments);};}();if(user&&quiz){var isExamHasGiven1=quiz.userEntry.some(function(el){return el.id===user.id;});console.log(isExamHasGiven1);if(user.grade!==quiz.grade){return/*#__PURE__*/_jsx(\"div\",{children:\" You are not permitted to give exam in this grade \"});}else if(quiz.isThereAnyExam===false){return/*#__PURE__*/_jsx(\"div\",{children:\"There Is no exam Today\"});}else if(isExamHasGiven1===false&&quiz.isThereAnyExam===true){return quiz?/*#__PURE__*/_jsx(Quiz,{quiz:quiz.question,onComplete:onCompleteAction}):/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}else if(isExamHasGiven1===true){return/*#__PURE__*/_jsx(\"div\",{children:\"You have Already give your exam\"});}}else{return/*#__PURE__*/_jsx(\"div\",{children:\"Loading..\"});}};var mapStateToProps=function mapStateToProps(state){return{user:selectCurrentUser(state)};};export default connect(mapStateToProps)(QuizDemo);","map":{"version":3,"sources":["/home/yarlo/Documentos/APP/quiz-final/src/components/quiz-demo/quiz-demo.component.jsx"],"names":["firebase","useState","useEffect","Quiz","connect","createResult","firestore","updateAverage","updateGroupResult","totalAvarage","selectCurrentUser","useParams","monthNames","checkUserExist","id","userID","QuizDemo","user","quiz","setQuiz","getData","doc","get","docRef","data","err","console","log","onCompleteAction","obj","numberOfCorrectAnswers","numberOfIncorrectAnswers","total","result","correctPoints","normalAvarage","length","mainAvarage","oldObj","firstName","average","examName","group","userRef","update","userEntry","FieldValue","arrayUnion","isExamHasGiven1","some","el","grade","isThereAnyExam","question","mapStateToProps","state"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nimport { useState, useEffect } from 'react';\nimport Quiz from 'react-quiz-component';\nimport { connect } from 'react-redux';\n\nimport { createResult, firestore, updateAverage, updateGroupResult } from '../../firebase/firebase.utilis';\nimport { totalAvarage } from './../../utilities'\n\nimport { selectCurrentUser } from '../../redux/user/user.selector';\nimport { useParams } from 'react-router-dom';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\n\n\nconst checkUserExist = (id, userID) => {\n\n    return id === userID\n\n}\n\nconst QuizDemo = ({ user }) => {\n    const [quiz, setQuiz] = useState();\n    const { id } = useParams();\n\n    useEffect(() => {\n        const getData = async () => {\n            const docRef = await firestore.doc(`questions/${id}`).get()\n            const data = docRef.data()\n            try {\n                setQuiz(data);\n\n            } catch (err) {\n                console.log(err)\n\n            }\n        }\n        getData()\n\n    }, [id])\n\n    const onCompleteAction = async (obj) => {\n\n        if (obj.numberOfCorrectAnswers === 0 && obj.numberOfIncorrectAnswers === 0) {\n            console.log('i am 0')\n\n        } else {\n\n            const total = totalAvarage(user.result, obj.correctPoints);\n            const normalAvarage = total / user.result.length;\n            const mainAvarage = (total + obj.correctPoints) / (user.result.length + 1)\n            const oldObj = {\n                firstName: user.firstName,\n                id: user.id,\n                average: normalAvarage\n            }\n\n            await createResult(user.id, obj, quiz.examName);\n            await updateGroupResult(user.group, user.id, user.firstName, mainAvarage, oldObj);\n            await updateAverage(user.id, mainAvarage);\n\n            const userRef = firestore.doc(`questions/${id}`)\n            await userRef.update({\n                userEntry: firebase.firestore.FieldValue.arrayUnion({\n                    id: user.id\n                })\n\n\n            }) \n\n\n        }\n\n\n        // YOUR LOGIC GOES HERE\n    }\n    if (user && quiz) {\n\n\n        let isExamHasGiven1 = quiz.userEntry.some(el => el.id === user.id)\n        console.log(isExamHasGiven1)\n\n\n\n\n        if (user.grade !== quiz.grade) {\n            return (<div> You are not permitted to give exam in this grade </div>)\n        }\n        else if (quiz.isThereAnyExam === false) {\n            return (<div>There Is no exam Today</div>)\n        }\n        else if (isExamHasGiven1 === false && quiz.isThereAnyExam === true) {\n            return quiz ? (<Quiz quiz={quiz.question} onComplete={onCompleteAction} />) : (<div>Loading...</div>);\n        } else if (isExamHasGiven1 === true) {\n            return (<div>You have Already give your exam</div>)\n        }\n    } else {\n        return (<div>Loading..</div>)\n    }\n\n\n}\n\nconst mapStateToProps = state => ({\n    user: selectCurrentUser(state)\n})\n\nexport default connect(mapStateToProps)(QuizDemo);"]},"metadata":{},"sourceType":"module"}